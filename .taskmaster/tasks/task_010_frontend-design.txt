# Task ID: 10
# Title: Build a Configurable Dynamic Form System
# Status: todo
# Dependencies: 2, 4, 6, 9
# Priority: medium
# Description: Develop a foundational, configurable dynamic form system designed to generate and manage various forms across the application. This infrastructure task aims to provide a reusable and extensible solution for creating and editing entities, moving away from specific form implementations towards a more generic, configuration-driven approach for future functionalities.
# Details:
Design and implement a core dynamic form rendering component that can interpret a configuration object (e.g., a schema definition) to render form fields. This system must:
1.  Integrate seamlessly with React Hook Form for robust state management and form handling.
2.  Utilize Zod for defining and applying dynamic validation schemas based on the form configuration.
3.  Support a wide range of input types, including text fields (`InputField`), select dropdowns (`SelectField`), checkboxes, radio buttons, and potentially other custom components, leveraging the reusable form field components from Task 4.
4.  Provide mechanisms for dynamic validation based on the provided Zod schemas.
5.  Include a generic submission handler that can be customized per form instance, and integrate with the toast system (Task 6) for user feedback on success or failure.
This task focuses on building the underlying infrastructure to enable rapid development of future forms.

# Test Strategy:
Conduct comprehensive unit and integration tests for the dynamic form system.
1.  Verify that the system correctly renders various form fields based on different configuration schemas.
2.  Test the integration with React Hook Form and Zod, ensuring that dynamic validation rules are correctly applied and error messages are displayed for invalid inputs.
3.  Create test cases for forms with diverse field types (text, select, checkbox) and complex validation scenarios to ensure robustness.
4.  Test the generic form submission process, verifying that the `onSubmit` handler is invoked and that success/error toasts (from Task 6) are displayed appropriately.
5.  Ensure the system's extensibility by testing the ease of adding new field types or validation rules.
